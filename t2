if not turtle then
    printError("Requires a Turtle")
    return
end

local function tunnel(length)
    if type(length) ~= "number" or length < 1 then
        error("Tunnel length must be a positive number")
    end

    local collected = 0

    local function collect()
        collected = collected + 1
        if math.fmod(collected, 25) == 0 then
            print("Mined " .. collected .. " items.")
        end
    end

    local function refuel()
        local fuelLevel = turtle.getFuelLevel()
        if fuelLevel == "unlimited" or fuelLevel > 0 then
            return true
        end

        local function tryRefuel()
            for n = 1, 16 do
                if turtle.getItemCount(n) > 0 then
                    turtle.select(n)
                    if turtle.refuel(1) then
                        turtle.select(1)
                        return true
                    end
                end
            end
            turtle.select(1)
            return false
        end

        if not tryRefuel() then
            print("Add more fuel to continue.")
            while not tryRefuel() do
                os.pullEvent("turtle_inventory")
            end
            print("Resuming Tunnel.")
        end
        return true
    end

    local function tryDig(detect, dig, attack)
        while detect() do
            if dig() then
                collect()
                sleep(0.5)
            else
                return false
            end
        end
        return true
    end

    local function tryMove(move, detect, dig, attack)
        refuel()
        while not move() do
            if detect() then
                if not tryDig(detect, dig, attack) then
                    return false
                end
            elseif attack() then
                collect()
            else
                sleep(0.5)
            end
        end
        return true
    end

    print("Tunnelling...")

    for n = 1, length do
        turtle.placeDown()
        tryDig(turtle.detectUp, turtle.digUp, turtle.attackUp)
        tryMove(turtle.up, turtle.detectUp, turtle.digUp, turtle.attackUp)
        turtle.turnLeft()
        tryMove(turtle.forward, turtle.detect, turtle.dig, turtle.attack)
        turtle.turnRight()
        turtle.turnRight()
        tryMove(turtle.forward, turtle.detect, turtle.dig, turtle.attack)
        turtle.turnLeft()

        if n < length then
            tryMove(turtle.forward, turtle.detect, turtle.dig, turtle.attack)
            if not tryMove(turtle.forward, turtle.detect, turtle.dig, turtle.attack) then
                print("Aborting Tunnel.")
                break
            end
        else
            print("Tunnel complete.")
        end
    end

    print("Tunnel complete.")
    print("Mined " .. collected .. " items total.")
end

-- Example usage:
local tArgs = { ... }
if #tArgs ~= 1 then
    local programName = arg[0] or fs.getName(shell.getRunningProgram())
    print("Usage: " .. programName .. " <length>")
    return
end

local length = tonumber(tArgs[1])
if length then
    tunnel(length)
else
    print("Tunnel length must be a positive number")
end
